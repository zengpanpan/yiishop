<?php
/**
 * Created by PhpStorm.
 * User: zpp
 * Date: 2017/2/27
 * Time: 11:57
 */
namespace app\models;
use yii\rest\ActiveController;
use yii\db\ActiveRecord;
class Users extends ActiveRecord{
    public $user_rpwd;
    public $check;
    public $code;
    public $type;
    static public function tableName(){//表名
        return '{{%user}}';
    }

    /**
     * 定义规则
     * @return array
     */
    public function rules(){
        return [
            //['last_time','safe'],
            ['user_name','required'],
            ['check','match','pattern'=>'/^[1]$/','message'=>'协议不通过'],
            ['user_phone','unique','on'=>'phone'],
            ['user_pwd','required'],
            ['user_rpwd','required'],
            ['user_rpwd','compare','compareAttribute' => 'user_pwd'],
            ['email','required'],
            ['email','email'],
            ['user_phone','required'],
            [['reg_time','code'],'integer'],
            ['user_phone','match','pattern'=>'/^[1][358][0-9]{9}$/'],
        ];
    }

    /**
     * 场景设置
     * @return array
     */
    public function scenarios()
    {
        $scenarios = parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios['phone'] = ['user_phone','user_pwd','user_rpwd','code'];
        $scenarios['email'] = ['user_name','email'];
        $scenarios['pwd'] = ['user_pwd','user_rpwd'];
        return $scenarios;
    }


    /**
     * 默认显示
     * @return array
     */
    public function attributeLabels(){
        return array(
            'user_name'=>'会员名称',
            'user_pwd'=>'登陆密码',
            'user_rpwd'=>'确认密码',
            'email'=>'邮箱',
            'status'=>'会员状态',
            'user_phone'=>'手机号',
            'check'=>'我已阅读并接受《用户协议》',
        );
    }

    /**
     * @param $data
     * @return bool
     * 会员添加
     */
    public function add($data){

        if($this->load($data)&&$this->Validate())
        {
            $this->user_pwd=md5($this->user_pwd);
            $this->reg_time=time();
            $res=$this->save(false);
            $this->user_rpwd='';
            $this->user_pwd='';
            return $res;
        }
        else
        {
            return false;
        }
    }

    /**
     * 手机号注册添加
     * @param $data
     * @return bool
     */
    public function adds($data){

        if($this->load(['Users'=>$data])&&$this->Validate())
        {
            $this->user_pwd=md5($this->user_pwd);
            $this->reg_time=time();
            $res=$this->save(false);
            return $res;
        }
        else
        {
            return false;
        }
    }

    /**
     * 会员邮件信息发送
     * @return bool
     */
    public function checkEmail()
    {
        $res=Users::find()
            ->where('user_name=:name AND email=:email',[':name'=>$this->user_name,':email'=>$this->email])
            ->one();
        if(is_null($res))
        {
            $this->addError('email','账户或邮箱不正确');
            return false;
        }
        $now=time();
        $token=$this->createToken($this->user_name,$now);
        $res=\Yii::$app->mailer->compose('userpwd',['token'=>$token,'adminname'=>$this->user_name,'timestamp'=>$now])
            ->setFrom('1530722579@qq.com')
            ->setTo($this->email)
            ->setSubject('必应商城找回密码')
            ->send();
        if($res)
        {
            return true;
        }
        else
        {
            $this->addError('email','抱歉!系统业务繁忙 请稍后重试');
            return false;
        }
    }
    /**
     * 生成Token
     * @param $name
     * @param $time
     * @return string
     */
    public function createToken($name,$time)
    {
        return md5(md5($name).md5($time).md5(\Yii::$app->request->userIP));
    }

    /**
     * 查询Member会员的关联信息
     * @return \yii\db\ActiveQuery
     */
    public function getMember(){
        return $this->hasOne(Member::ClassName(),['user_id'=>'user_id']);//Member::ClassName() Member类路径
    }

    /**
     * 商品详情登陆检测
     * @param $data
     * @return array|null|ActiveRecord
     */
    public function getUserOne($data){
        return self::find()->where('user_name=:name AND user_pwd=:pwd',['name'=>$data['name'],'pwd'=>$data['pwd']])->asArray()->One();
    }

    /**
     * 短信发送
     * @param $a_parm
     * @return bool
     */
    public static function nowapi_call($a_parm){
        if(!is_array($a_parm)){
            return false;
        }
        //combinations
        $a_parm['format']=empty($a_parm['format'])?'json':$a_parm['format'];
        $apiurl=empty($a_parm['apiurl'])?'http://api.k780.com:88/?':$a_parm['apiurl'].'/?';
        unset($a_parm['apiurl']);
        foreach($a_parm as $k=>$v){
            $apiurl.=$k.'='.$v.'&';
        }
        $apiurl=substr($apiurl,0,-1);
        if(!$callapi=file_get_contents($apiurl)){
            return false;
        }
        //format
        if($a_parm['format']=='base64'){
            $a_cdata=unserialize(base64_decode($callapi));
        }elseif($a_parm['format']=='json'){
            if(!$a_cdata=json_decode($callapi,true)){
                return false;
            }
        }else{
            return false;
        }
        //array
        if($a_cdata['success']!='1'){
            echo $a_cdata['msgid'].' '.$a_cdata['msg'];
            return false;
        }
        return $a_cdata['result'];
    }
}